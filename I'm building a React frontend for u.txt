I'm building a React frontend for user authentication and using Tailwind CSS for styling.

Please help me generate and organize the following pages inside the `src/pages` directory, styled with Tailwind classes:

1. **SignIn.js** – A login form with email and password inputs, error handling, and a submit button.
2. **SignUp.js** – A signup form with fields for first name, last name, email, password, confirm password, validation, and error/success output.
3. **ResetPassword.js** – A password reset form with email, new password, and confirm password inputs.
4. **VerifyUser.js** – A simple verification form that accepts a verification code.
5. **ErrorOutput.js & SuccessOutput.js** – Reusable components for displaying messages.

Ensure:
- Each page uses Tailwind CSS classes instead of Bootstrap.
- Inputs and buttons are responsive and styled properly.
- Use minimal, clean, modern UI layout (centered form, padding, margin, etc.).
- Files are structured within `src/pages` and `src/components/common`.

Also:
- Create reusable form groups or input components if possible.
- Make sure the components are modular and follow clean React conventions.
- All paths used in imports are correct relative to the `src/` folder.

Finally, give me the updated file tree after you apply these changes.


use the information below as a case study


import { Link, useNavigate } from "react-router-dom";
import { useLoginUserMutation } from "../../lib/APIs/authAPIs";
import ErrorOutput from "../common/ErrorOutput";
import { useEffect, useState } from "react";

const SignIn = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const [loginUser, { isSuccess, isError, error, isLoading, data }] = useLoginUserMutation();
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    if (!email || !password) return;
    await loginUser({ email, password });
  };

  useEffect(() => {
    if (isSuccess) {
      localStorage.setItem("refreshToken", data?.refreshToken);
      navigate("/");
    }
  }, [isSuccess]);

  return (
    <div className="max-w-md mx-auto mt-10 p-6 bg-white shadow-md rounded-md">
      <h3 className="text-2xl font-semibold mb-6 text-center">Sign In</h3>

      {isError && <ErrorOutput errorMessage={error?.data?.error || "Login failed"} />}

      <form onSubmit={handleLogin} className="space-y-4">
        <input
          type="email"
          placeholder="Email"
          className="w-full px-4 py-2 border rounded-md"
          onChange={(e) => setEmail(e.target.value)}
          value={email}
        />

        <input
          type="password"
          placeholder="Password"
          className="w-full px-4 py-2 border rounded-md"
          onChange={(e) => setPassword(e.target.value)}
          value={password}
        />

        <button
          type="submit"
          disabled={isLoading}
          className="w-full py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition"
        >
          {isLoading ? "Signing in..." : "Sign In"}
        </button>
      </form>

      <div className="flex justify-between text-sm mt-6">
        <Link to="/get-started/signup" className="text-blue-500">Sign Up</Link>
        <Link to="/get-started/reset-password" className="text-blue-500">Forgot Password?</Link>
      </div>
    </div>
  );
};

export default SignIn;








import { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import useFormValidation from "../../hooks/useFormValidation";
import { useCreateNewUserMutation } from "../../lib/APIs/UserAPI";
import ErrorOutput from "../common/ErrorOutput";

const SignUp = () => {
  const [fields, setFields] = useState({
    firstName: "", lastName: "", email: "", password: "", confirmPassword: ""
  });

  const [createNewUser, { isLoading, error, isError, isSuccess }] = useCreateNewUserMutation();
  const [validateInput, formError, formIsValid] = useFormValidation();
  const navigate = useNavigate();

  useEffect(() => {
    const timer = setTimeout(() => {
      validateInput(fields);
    }, 500);
    return () => clearTimeout(timer);
  }, [fields]);

  const handleChange = (e) => {
    setFields({ ...fields, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!formIsValid) return;
    await createNewUser(fields);
  };

  useEffect(() => {
    if (isSuccess) {
      navigate("/get-started/verify-account");
    }
  }, [isSuccess]);

  return (
    <div className="max-w-md mx-auto mt-10 p-6 bg-white shadow-md rounded-md">
      <h3 className="text-2xl font-semibold mb-6 text-center">Sign Up</h3>

      {formError && <ErrorOutput errorMessage={formError} />}
      {isError && <ErrorOutput errorMessage={error?.data?.error || "Signup failed"} />}

      <form onSubmit={handleSubmit} className="space-y-4">
        {["firstName", "lastName", "email", "password", "confirmPassword"].map((field) => (
          <input
            key={field}
            name={field}
            type={field.includes("password") ? "password" : "text"}
            placeholder={`Enter ${field.replace(/([A-Z])/g, " $1")}`}
            className="w-full px-4 py-2 border rounded-md"
            onChange={handleChange}
            value={fields[field]}
          />
        ))}

        <button
          type="submit"
          disabled={!formIsValid || isLoading}
          className="w-full py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition"
        >
          {isLoading ? "Please wait..." : "Sign Up"}
        </button>
      </form>

      <p className="text-sm text-center mt-4">
        Already have an account? <Link to="/get-started/login" className="text-blue-500">Sign In</Link>
      </p>
    </div>
  );
};

export default SignUp;









import { Link } from "react-router-dom";

const ResetPassword = () => {
  return (
    <div className="max-w-md mx-auto mt-10 p-6 bg-white shadow-md rounded-md">
      <h3 className="text-2xl font-semibold mb-6 text-center">Reset Password</h3>

      <form className="space-y-4">
        <input type="email" placeholder="Email" className="w-full px-4 py-2 border rounded-md" />
        <input type="password" placeholder="New Password" className="w-full px-4 py-2 border rounded-md" />
        <input type="password" placeholder="Confirm Password" className="w-full px-4 py-2 border rounded-md" />

        <button type="submit" className="w-full py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition">
          Submit
        </button>
      </form>

      <p className="text-sm text-center mt-4">
        Password reset? <Link to="/get-started/login" className="text-blue-500">Sign In</Link>
      </p>
    </div>
  );
};

export default ResetPassword;













import { useEffect, useRef } from "react";
import { useVerifyUserMutation } from "../../lib/APIs/UserAPI";
import { useNavigate } from "react-router-dom";
import ErrorOutput from "../common/ErrorOutput";

const Verification = () => {
  const tokenRef = useRef();
  const navigate = useNavigate();
  const [verifyUser, { isSuccess, isError, error, isLoading }] = useVerifyUserMutation();

  const handleVerify = async (e) => {
    e.preventDefault();
    const code = tokenRef?.current?.value;
    if (!code) return;
    await verifyUser({ verificationToken: code });
  };

  useEffect(() => {
    if (isSuccess) {
      navigate("/get-started/login");
    }
  }, [isSuccess]);

  return (
    <div className="max-w-md mx-auto mt-10 p-6 bg-white shadow-md rounded-md">
      <h3 className="text-2xl font-semibold mb-6 text-center">Verify Account</h3>

      {isError && <ErrorOutput errorMessage={error?.data?.error || "Verification failed"} />}

      <form onSubmit={handleVerify} className="space-y-4">
        <input
          type="text"
          placeholder="Verification Code"
          className="w-full px-4 py-2 border rounded-md"
          ref={tokenRef}
        />

        <button
          type="submit"
          className="w-full py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition"
        >
          {isLoading ? "Verifying..." : "Verify"}
        </button>
      </form>
    </div>
  );
};

export default Verification;























const ErrorOutput = ({ errorMessage }) => (
  <div className="bg-red-100 text-red-800 p-2 rounded text-sm">
    {errorMessage}
  </div>
);

export default ErrorOutput;
















const SuccessOutput = ({ message }) => (
  <div className="bg-green-100 text-green-800 p-2 rounded text-sm">
    {message}
  </div>
);

export default SuccessOutput;
















import { BrowserRouter as Router, Routes, Route, Navigate } from "react-router-dom";
import SignIn from "./pages/SignIn";
import SignUp from "./pages/SignUp";
import ResetPassword from "./pages/ResetPassword";
import Verification from "./pages/Verification";

const App = () => {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Navigate to="/get-started/login" />} />
        <Route path="/get-started/login" element={<SignIn />} />
        <Route path="/get-started/signup" element={<SignUp />} />
        <Route path="/get-started/reset-password" element={<ResetPassword />} />
        <Route path="/get-started/verify-account" element={<Verification />} />
        
        {/* Optional: fallback route */}
        <Route path="*" element={<p className="text-center mt-20">404 - Page Not Found</p>} />
      </Routes>
    </Router>
  );
};

export default App;














import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App";
import reportWebVitals from "./reportWebVitals";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

reportWebVitals();










src/
├── App.js
├── index.js
├── pages/
│   ├── SignIn.js
│   ├── SignUp.js
│   ├── ResetPassword.js
│   └── VerifyUser.js
├── lib/
│   └── APIs/
│       ├── authAPIs.js
│       └── UserAPI.js
├── redux/
│   └── userSlice.js
├── hooks/
│   └── useFormValidation.js




